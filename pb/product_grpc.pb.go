// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductSvc_InsertProduct_FullMethodName = "/proto.ProductSvc/InsertProduct"
	ProductSvc_GetAllProduct_FullMethodName = "/proto.ProductSvc/GetAllProduct"
)

// ProductSvcClient is the client API for ProductSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSvcClient interface {
	InsertProduct(ctx context.Context, in *InsertProductRequest, opts ...grpc.CallOption) (*InsertProductResponse, error)
	GetAllProduct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProductResponse, error)
}

type productSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSvcClient(cc grpc.ClientConnInterface) ProductSvcClient {
	return &productSvcClient{cc}
}

func (c *productSvcClient) InsertProduct(ctx context.Context, in *InsertProductRequest, opts ...grpc.CallOption) (*InsertProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertProductResponse)
	err := c.cc.Invoke(ctx, ProductSvc_InsertProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSvcClient) GetAllProduct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProductResponse)
	err := c.cc.Invoke(ctx, ProductSvc_GetAllProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSvcServer is the server API for ProductSvc service.
// All implementations must embed UnimplementedProductSvcServer
// for forward compatibility.
type ProductSvcServer interface {
	InsertProduct(context.Context, *InsertProductRequest) (*InsertProductResponse, error)
	GetAllProduct(context.Context, *emptypb.Empty) (*GetAllProductResponse, error)
	mustEmbedUnimplementedProductSvcServer()
}

// UnimplementedProductSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSvcServer struct{}

func (UnimplementedProductSvcServer) InsertProduct(context.Context, *InsertProductRequest) (*InsertProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProduct not implemented")
}
func (UnimplementedProductSvcServer) GetAllProduct(context.Context, *emptypb.Empty) (*GetAllProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedProductSvcServer) mustEmbedUnimplementedProductSvcServer() {}
func (UnimplementedProductSvcServer) testEmbeddedByValue()                    {}

// UnsafeProductSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSvcServer will
// result in compilation errors.
type UnsafeProductSvcServer interface {
	mustEmbedUnimplementedProductSvcServer()
}

func RegisterProductSvcServer(s grpc.ServiceRegistrar, srv ProductSvcServer) {
	// If the following call pancis, it indicates UnimplementedProductSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSvc_ServiceDesc, srv)
}

func _ProductSvc_InsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvcServer).InsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSvc_InsertProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvcServer).InsertProduct(ctx, req.(*InsertProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSvc_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvcServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSvc_GetAllProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvcServer).GetAllProduct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSvc_ServiceDesc is the grpc.ServiceDesc for ProductSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProductSvc",
	HandlerType: (*ProductSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProduct",
			Handler:    _ProductSvc_InsertProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _ProductSvc_GetAllProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
